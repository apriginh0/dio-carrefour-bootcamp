Demonstrar a utilização de 3 métodos importantes para Arrays.
Mapping funciton y=f(x)
Cria um novo array. Não modifica o array original. Realiza as operações em ordem.

array.map(callback, thisArg) - callback(item, index, array)
callback: função a ser executada em cada elemento
thisArg(opcional): valor de 'this' dentro da função de callback

Map vs forEach

const array = [1, 2, 3, 4, 5];
array.map((item) => item * 2); // retorno: [2, 4, 6, 8, 10];

const array = [1, 2, 3, 4, 5];
array.forEach((item) => item * 2); // retorno: underfined
// no forEach seria necessário adicionar o resultado a uma constante

Ou seja, a diferença entre os 2 é basicamente o valor de retorno e
é necessário considerar se vai precisar de um array auxiliar para continuar as operações
slide: https://drive.google.com/file/d/1e36EcBtMj-aAOU2K0sk1SxB_gROxizjM/view

Filter é como colocar todo o array passando por um filtro e apenas os itens correspondentes
a determinadas condições vão retornar no novo array que vai ser criado.
Cria novo array e não modifica o array original

array.filter(callback, thisArg)

callback: função a ser executada em cada elemento - no filter, normalmente é uma comparação
thisArg: valor de 'this' dentro da função de callback

const frutas = ['maçã fuji', 'maçã verde', 'laranja', 'abacaxi'];
frutas.filter((fruta) => fruta.includes('maçã'))
// retorno: ['maçã fuji', 'maçã verde'];

Reduce, diferente do filter e do map, ele não vai retornar um array
vai executar uma função em todos os elementos do array, retornando um valor único
o valor pode ser um array, pode ser uma string, pode ser um number...

array.reduce(callbackFn, initialValue);

callbackFn: função a ser executada a partir do acumulador
initialValue: valor sobre o qual o retorno final irá atuar

const callbackFn = funciton(accumulator, currentValue, index, array){
    // do something
}
array.reduce(callbackFn, initialValue);

accumulator/prevValue: acumulador de todas as chamadas de callbackFn
currentValue: elemento atual sendo acessado pela função